################
Regex 正则表达式
################

.. highlight:: none

元字符介绍
==========

表示字符(或字符集)
------------------

-  ``.`` 点号, 表示一个任意符号(除了换行符).
-  ``\b`` 匹配处于单词头部或尾部的空字符. 如 ``This is a high tower``,
   ``hi\b`` 将会匹配 ``high`` 中的 ``hi``, 而 ``This`` 中的 ``hi``
   不会匹配
-  ``\B`` 匹配处于单词内部的空字符.
-  ``\w`` 匹配任何数字或字母.
-  ``\W`` 匹配任何非数字或字母.
-  ``\d`` 匹配任何数字.
-  ``\D`` 匹配任何非数字.
-  ``\s`` 匹配任何空白字符.
-  ``\S`` 匹配任何非空白字符.
-  ``[]`` 表示字符集, 在其中的任意一个字符, 都可被匹配.

限定符
------

在正则表达式中, 有这样几个有用的元字符用于指定重复次数:

-  ``*`` 星号, 限定前方的那个字符将会重复 0 次以上.
-  ``+`` 加号, 限定前方的那个字符将会重复 1 次以上.
-  ``?`` 问好, 限定前方的那个字符将会出现 1 次或 0 次.

用这些元字符, 可以起到更高级的通配符功能.

例如

::

   colou?r 可以匹配 colour 或 color
   wtf+    可以匹配 wtf, wtff, wtfff, ...
   wtf*    则可以匹配 wt, wtf, wtff, wtfff, ...
   而 .*   的组合可以匹配任意字符串.

还可以自定义重复次数, 这些表达式都和花括号有关:

-  ``{n}`` 指定重复 n 次.
-  ``{m,}`` 指定重复 m 次及以上.
-  ``{,n}`` 指定重复 n 次及以内.
-  ``{m,n}`` 指定重复 m 次到 n 次.

定位符
------

除此之外, 还需要了解一下这些用于定位字符串的元字符:

-  ``^`` 表示一个字符串的开始.
-  ``$`` 表示一个字符串的结束.

例如

::

   test a text

   ^t 将会匹配 test 的第一个 t
   t$ 将会匹配到 text 的最后一个 t

而 ``\b`` 与 ``\B`` 也常用于定位单词.

-  ``\b`` 将会匹配一个单词边界, 例如下划线 ``_`` , 空格, 标点符号等.
-  ``\B`` 则匹配非边界.

**不能将限定符用在定位符之后!!! ``\b`` 与 ``\B`` 后也不能跟限定符.**

捕获组(子表达式)
----------------

在一个正则表达式中, 可以嵌入捕获组.

-  ``()`` 捕获组. 在括号中的字符, 必须全部匹配, 才会匹配整个捕获组.
   整个表达式作为一个字符串. 并且将能在之后再次取用.

捕获组和字符集是不同的概念.

例如:

::

   Common plain text in windows notepad
   [win] 将会匹配所有的 w, i, n
   (win) 只会匹配 windows 中的 "win"

要取用匹配到的捕获组, 可以使用 :func:`re.Match.group` 提取捕获组, 将目标捕获组的整数编号输入.

.. code-block:: python

    re.Match.group(1) # 得到第一个子捕获组

命名捕获组
----------

定义捕获组时可以像这样命名:

.. code-block:: python

   pattern = r'(?P<hello>\S+)'

然后可使用 ``group('hello')`` 来获取此捕获组的值.

非捕获组
--------

在括号内添加 ``?:`` 符号,
即 ``(?:)`` 是一个非捕获组.

它和捕获组的区别在于,
非捕获组相当于一个子表达式,
但是不会被 :meth:`re.Match.group` 提取出来,
也不会累计捕获组编号.

pattern 位于 ``(?:pattern)``.

正向肯定查找
------------

在括号内使用 ``?=`` 符号,
即 ``(?=)``.

此符号不被计入 :class:`re.Match`,
而是在匹配时添加限定条件.

例如,
要找到一个跟在 ``[error]`` 提示符后面的语句,
可以使用::

   (?=\[error\])\S+

当然, 也可以将其后缀.

正向否定查找
------------

在括号内使用 ``?!`` 符号,
即 ``(?!)``.

正向否定查找类似于肯定查找,
不过匹配条件为否定.

例如,
找到没有 ``[error]`` 后缀的输出::

   \S+(?!\[error\])

值得在意的系统控制字符
======================

-  换行符, ``\n``, ``control-J``
-  回车符, ``\e``, ``control-M``
-  换页符, ``\f``, ``control-L``

参考链接
========

- http://www.runoob.com/python/python-reg-expressions.html
- https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions