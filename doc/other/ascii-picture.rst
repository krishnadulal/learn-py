######################
使用 Python 转换字符画
######################

Python 处理图片, 少不了 :mod:`pillow` 库,
而这个模块并不在标准库之中,
因此, 需要在 Pypi 下载安装::

    pip install pillow

该模块的导入名为 ``PIL``.

字符画是没有携带色彩信息的,
因此, 需要在制作前将彩色图片转化为灰度图.

首先, 了解一些关于像素的知识.

图片的基本组成单元为像素.
每一个像素存储了红绿蓝三种色彩的信息 (RGB)

现在, 一般情况下每一种颜色的情况用一个 8 bit 的无符号整数存储.
一个像素占 32 bit,
这是因为除了 3 种色彩的 3\*8=24 bit 之外,
还有 8 bit 存储了透明度,
即 Alpha 通道的值.

常见的 ``rgb(255, 255, 255)``
就是用十进制三维向量表示 8 bit RGB 颜色.

另外, 还有使用 16 位, 32 位 整数的 RGB 图像,
不过用于专业领域, 平时很难见到.

灰度则是只有不同饱和度的黑色与白色组成的图像.
每一个像素仅仅保存从 0 ~ 100% 的灰度信息,
可以看做是物体的亮度.

要将 RGB 转换为纯灰度,
可以使用另一个三维向量与 RGB 向量点乘法,
得到相应的灰度值.

根据一个著名的心理学公式:

.. math:: (0.299, 0.587, 0.114) \cdot (R, G, B)

在计算机中, 为了高效地运算, 常常使用移位算法::

    grey = (R * 19595 + G * 38469 + B * 7472) >> 16

其实, 这就是先将系数缩放为 2 的整数幂次倍取整,
再将其移位:

.. math:: k = [k_0 \times 2^{n}]

::

    grey = (R * k + ...) >> n

---

在代码中, 我们需要进行以下步骤:

1.  打开图片, 准备字符缓冲区
#.  建立 灰度 - 字符 映射
#.  读取像素 RGB 值
#.  获取对应灰度值
#.  将灰度值对应的字符写入到缓冲区.
#.  输出字符画

成品
====

见 https://github.com/zombie110year/pic2text
