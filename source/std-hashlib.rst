#######
hashlib
#######

简介
====

``hashlib`` 提供了 ``md5``, ``sha1`` , ``sha256`` 等多种散列算法的支持. 要查看所有支持的算法, 可以查阅内置的集合 ``algorithms_available``, 另外, ``hashlib`` 给出了推荐使用的算法, 查阅集合 ``algorithms_guaranteed``.

::

    hashlib.algorithms_guaranteed = {
        'blake2b',
        'blake2s',
        'md5',
        'sha1',
        'sha224',
        'sha256',
        'sha384',
        'sha3_224',
        'sha3_256',
        'sha3_384',
        'sha3_512',
        'sha512',
        'shake_128',
        'shake_256'
    }

hash对象通用操作
================

``hashlib.md5()`` 之类的函数, 实际上是对应 hash 对象的实例化函数, 每一个 hash 对象都有一个 ``update()`` 方法, 接受一个 ``bytes`` 类型的对象作为参数, 也可以在实例化时直接输入. 多次使用 ``update()`` 的方法和将所有传入的字节按顺序连接起来一次输入的效果是一样的.

可以通过 hash 对象的 ``hexdigest()`` 方法获取 hash 值的十六进制表示 (字符串类型).

``digest()`` 则是返回字节类型的 hash 值 (不一定能够解码为字符串).

md5
===

``md5`` 是最常用的 HASH 算法, 具有速度快的特点. 生成值为一个 128bit 的二进制数, 常用 32 字节的 16 进制数(字符串格式)表示.

``md5`` 的全称是 "Message-digest Algorithm 5" (信息-摘要算法). 信息摘要算法能将任意长度的数据计算出固定长度的摘要. 对原数据进行的任何改动, 都会使摘要值发生变化. (能产生 :math:`2^{128}` 个不同的摘要, 如果有更多的输入数据, 那么就一定会产生重复的摘要了, 不过在 :math:`2^{128}` 范围内, 遇到重复摘要的概率基本可以忽略)

``md5`` 函数常用来判断两个对象是否相同.

sha1
====

``sha1`` 生成 160bit 的二进制数, 常用 40 字节的十六进制数表示.

sha256
======

``sha256`` 生成 256bit 的二进制数, 常用 64 字节的十六进制数表示.